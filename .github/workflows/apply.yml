name: Apply EKS (dir, IAM user)

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Terraform directory to apply'
        required: true
        default: 'terraform'
      tf_vars:
        description: 'Extra TF -var values (key=value, space-separated)'
        required: false
        default: ''
      force_unlock:
        description: 'Force-unlock the DynamoDB lock row before running (true/false)'
        required: false
        default: 'false'

concurrency:
  group: tf-apply-${{ github.ref }}-${{ github.event.inputs.tf_dir || 'terraform' }}

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      TF_BACKEND_BUCKET:  ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_TABLE:   ${{ secrets.TF_BACKEND_TABLE }}
      TF_BACKEND_KEY:     ${{ secrets.TF_BACKEND_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Resolve directory
        shell: bash
        run: |
          set -euo pipefail
          TF_DIR="${{ github.event.inputs.tf_dir || 'terraform' }}"
          echo "TF_DIR=$TF_DIR" >> "$GITHUB_ENV"
          test -d "$TF_DIR" || { echo "Directory '$TF_DIR' not found"; exit 1; }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Compute backend key
        id: key
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${TF_BACKEND_KEY}" == *.tfstate ]]; then
            echo "BACKEND_KEY=${TF_BACKEND_KEY}" >> "$GITHUB_ENV"
          else
            PREFIX="${TF_BACKEND_KEY%/}"
            echo "BACKEND_KEY=${PREFIX}/${{ env.TF_DIR }}/terraform.tfstate" >> "$GITHUB_ENV"
          fi
          echo "Using TF_BACKEND_TABLE=${TF_BACKEND_TABLE}"
          echo "Using BACKEND_KEY=${BACKEND_KEY}"

      # ---------- Preflight lock handling ----------

      - name: (Optional) Force unlock on request
        if: ${{ github.event.inputs.force_unlock == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "Force-unlocking DynamoDB lock row: table=$TF_BACKEND_TABLE LockID=$BACKEND_KEY"
          aws dynamodb delete-item \
            --table-name "$TF_BACKEND_TABLE" \
            --key "{\"LockID\":{\"S\":\"${BACKEND_KEY}\"}}" \
            --condition-expression "attribute_exists(LockID)" || true

      - name: (Optional) Auto-unlock stale locks (>15m)
        if: ${{ github.event.inputs.force_unlock != 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          ROW_JSON="$(aws dynamodb get-item \
            --table-name "$TF_BACKEND_TABLE" \
            --key "{\"LockID\":{\"S\":\"${BACKEND_KEY}\"}}" \
            --output json || true)"
          echo "$ROW_JSON" | jq -e '.Item' >/dev/null 2>&1 || { echo "No existing lock row."; exit 0; }

          CREATED="$(echo "$ROW_JSON" | jq -r '.Item.Created.S // empty')"
          WHO="$(echo "$ROW_JSON" | jq -r '.Item.Who.S // empty')"
          OP="$(echo "$ROW_JSON" | jq -r '.Item.Operation.S // empty')"
          echo "Existing lock → Who=${WHO} Operation=${OP} Created=${CREATED}"

          if [ -n "$CREATED" ]; then
            CREATED_S=$(date -d "$CREATED" +%s 2>/dev/null || date -j -f "%Y-%m-%d %H:%M:%S %z" "$CREATED" +%s 2>/dev/null || echo 0)
            NOW_S=$(date +%s)
            AGE=$(( NOW_S - CREATED_S ))
            if [ "$AGE" -gt 900 ]; then
              echo "Lock is stale (${AGE}s old) → deleting row"
              aws dynamodb delete-item \
                --table-name "$TF_BACKEND_TABLE" \
                --key "{\"LockID\":{\"S\":\"${BACKEND_KEY}\"}}"
            else
              echo "Lock exists but is fresh (${AGE}s). Terraform will wait with -lock-timeout."
            fi
          else
            echo "No parsable Created timestamp; skipping auto-delete."
          fi

      # ---------- Terraform run ----------

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          terraform init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_TABLE"

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform plan \
            -lock-timeout=5m \
            -input=false \
            -out=tfplan \
            -var "region=$AWS_REGION" \
            ${{ github.event.inputs.tf_vars }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -lock-timeout=5m -auto-approve tfplan


