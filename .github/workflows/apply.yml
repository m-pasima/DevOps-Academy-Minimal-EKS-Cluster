name: Apply EKS (dir, IAM user)

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Terraform directory to apply'
        required: true
        default: 'terraform'
      tf_vars:
        description: 'Extra TF -var values (key=value, space-separated). Example: project_name=teaching-eks cluster_version=1.29'
        required: false
        default: ''

concurrency:
  group: tf-apply-${{ github.ref }}-${{ github.event.inputs.tf_dir || 'terraform' }}

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      TF_BACKEND_BUCKET:  ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_TABLE:   ${{ secrets.TF_BACKEND_TABLE }}
      TF_BACKEND_KEY:     ${{ secrets.TF_BACKEND_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Resolve directory & show files
        shell: bash
        run: |
          set -euo pipefail
          TF_DIR="${{ github.event.inputs.tf_dir || 'terraform' }}"
          echo "TF_DIR=$TF_DIR" >> "$GITHUB_ENV"
          test -d "$TF_DIR" || { echo "❌ Directory '$TF_DIR' not found"; exit 1; }
          echo "PWD=$(pwd)"
          echo "=== ls $TF_DIR ==="
          ls -la "$TF_DIR"
          echo "=== terraform.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/terraform.tf"
          echo "=== variables.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/variables.tf"
          echo "=== vpc.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/vpc.tf"
          echo "=== eks.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/eks.tf"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init (providers only, no backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init -backend=false -input=false -upgrade
          sed -n '1,80p' "${{ env.TF_DIR }}/.terraform.lock.hcl"

      - name: Terraform Validate
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" validate -no-color

      - name: Configure AWS (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Compute backend key
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${TF_BACKEND_KEY}" == *.tfstate ]]; then
            BACKEND_KEY="${TF_BACKEND_KEY}"
          else
            PREFIX="${TF_BACKEND_KEY%/}"
            BACKEND_KEY="${PREFIX}/${{ env.TF_DIR }}/terraform.tfstate"
          fi
          echo "BACKEND_KEY=$BACKEND_KEY" >> "$GITHUB_ENV"
          echo "Using BACKEND_KEY=$BACKEND_KEY"

      - name: Terraform Init (remote backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_TABLE" \
            -input=false -no-color

      - name: Derive cluster name and admin_principal_arn, export TF_VARs
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_NAME="teaching-eks"
          for tok in ${{ github.event.inputs.tf_vars }}; do
            if [[ "$tok" == project_name=* ]]; then PROJECT_NAME="${tok#project_name=}"; fi
          done
          CLUSTER="${PROJECT_NAME}-cluster"

          ARN="$(aws sts get-caller-identity --query Arn --output text)"
          ACCOUNT="$(aws sts get-caller-identity --query Account --output text)"
          if [[ "$ARN" == *":user/"* ]]; then
            ADMIN="$ARN"
          elif [[ "$ARN" == *":assumed-role/"* ]]; then
            ROLE_NAME="$(echo "$ARN" | awk -F'/' '{print $2}')"
            ADMIN="arn:aws:iam::${ACCOUNT}:role/${ROLE_NAME}"
          else
            echo "❌ Unsupported caller ARN for admin mapping: $ARN"; exit 1
          fi

          {
            echo "PROJECT_NAME=$PROJECT_NAME"
            echo "CLUSTER=$CLUSTER"
            echo "ADMIN=$ADMIN"
            echo "TF_VAR_admin_principal_arn=$ADMIN"
            echo "TF_VAR_region=$AWS_REGION"
            echo "TF_VAR_project_name=$PROJECT_NAME"
          } >> "$GITHUB_ENV"

          echo "Resolved: CLUSTER=$CLUSTER"
          echo "Resolved: admin_principal_arn=$ADMIN"

      - name: Reconcile IAM Roles, Subnets, and EKS Access Resources
        shell: bash
        run: |
          set -euo pipefail

          in_state() {
            local addr="$1"
            terraform -chdir="${{ env.TF_DIR }}" state list 2>/dev/null | grep -Fx "$addr" >/dev/null
          }

          # Debug: Show current Terraform state
          echo "→ Current Terraform state"
          terraform -chdir="${{ env.TF_DIR }}" state list 2>/dev/null || echo "  • No resources in state"

          # Import IAM Role: teaching-eks-cluster-role
          echo "→ IAM Role (cluster)"
          if in_state "aws_iam_role.cluster"; then
            echo "  • Already in state"
          else
            echo "  • Checking if teaching-eks-cluster-role exists in AWS"
            if aws iam get-role --role-name teaching-eks-cluster-role --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (teaching-eks-cluster-role)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_iam_role.cluster teaching-eks-cluster-role || {
                echo "  • Failed to import IAM role teaching-eks-cluster-role"
                exit 1
              }
              echo "  • Successfully imported teaching-eks-cluster-role"
            else
              echo "  • Role teaching-eks-cluster-role does not exist in AWS; will be created during apply"
            fi
          fi

          # Import IAM Role: teaching-eks-node-role
          echo "→ IAM Role (node)"
          if in_state "aws_iam_role.node"; then
            echo "  • Already in state"
          else
            echo "  • Checking if teaching-eks-node-role exists in AWS"
            if aws iam get-role --role-name teaching-eks-node-role --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (teaching-eks-node-role)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_iam_role.node teaching-eks-node-role || {
                echo "  • Failed to import IAM role teaching-eks-node-role"
                exit 1
              }
              echo "  • Successfully imported teaching-eks-node-role"
            else
              echo "  • Role teaching-eks-node-role does not exist in AWS; will be created during apply"
            fi
          fi

          # Import Subnet: subnet-07283d2152a4fbb12 (key 'a')
          echo "→ Subnet (a)"
          if in_state "aws_subnet.public[\"a\"]"; then
            echo "  • Already in state"
          else
            echo "  • Checking if subnet-07283d2152a4fbb12 exists in AWS"
            if aws ec2 describe-subnets --subnet-ids subnet-07283d2152a4fbb12 --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (subnet-07283d2152a4fbb12)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_subnet.public[\"a\"] subnet-07283d2152a4fbb12 || {
                echo "  • Failed to import subnet subnet-07283d2152a4fbb12"
                exit 1
              }
              echo "  • Successfully imported subnet-07283d2152a4fbb12"
            else
              echo "  • Subnet subnet-07283d2152a4fbb12 does not exist in AWS; will be created during apply"
            fi
          fi

          # Import Subnet: subnet-05f324d922d729008 (key 'b')
          echo "→ Subnet (b)"
          if in_state "aws_subnet.public[\"b\"]"; then
            echo "  • Already in state"
          else
            echo "  • Checking if subnet-05f324d922d729008 exists in AWS"
            if aws ec2 describe-subnets --subnet-ids subnet-05f324d922d729008 --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (subnet-05f324d922d729008)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_subnet.public[\"b\"] subnet-05f324d922d729008 || {
                echo "  • Failed to import subnet subnet-05f324d922d729008"
                exit 1
              }
              echo "  • Successfully imported subnet-05f324d922d729008"
            else
              echo "  • Subnet subnet-05f324d922d729008 does not exist in AWS; will be created during apply"
            fi
          fi

          # Import Route Table Association: rtbassoc-0ecb61f0f3ac4305f (key 'a')
          echo "→ Route Table Association (a)"
          if in_state "aws_route_table_association.public[\"a\"]"; then
            echo "  • Already in state"
          else
            echo "  • Checking if rtbassoc-0ecb61f0f3ac4305f exists in AWS"
            if aws ec2 describe-route-tables --filters Name=association.route-table-association-id,Values=rtbassoc-0ecb61f0f3ac4305f --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (rtbassoc-0ecb61f0f3ac4305f)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_route_table_association.public[\"a\"] rtbassoc-0ecb61f0f3ac4305f || {
                echo "  • Failed to import route table association rtbassoc-0ecb61f0f3ac4305f"
                exit 1
              }
              echo "  • Successfully imported rtbassoc-0ecb61f0f3ac4305f"
            else
              echo "  • Route table association rtbassoc-0ecb61f0f3ac4305f does not exist in AWS; will be created during apply"
            fi
          fi

          # Import Route Table Association: rtbassoc-0ef7cae7d11d64815 (key 'b')
          echo "→ Route Table Association (b)"
          if in_state "aws_route_table_association.public[\"b\"]"; then
            echo "  • Already in state"
          else
            echo "  • Checking if rtbassoc-0ef7cae7d11d64815 exists in AWS"
            if aws ec2 describe-route-tables --filters Name=association.route-table-association-id,Values=rtbassoc-0ef7cae7d11d64815 --region "${AWS_REGION}" >/dev/null 2>&1; then
              echo "  • Importing (rtbassoc-0ef7cae7d11d64815)"
              terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                aws_route_table_association.public[\"b\"] rtbassoc-0ef7cae7d11d64815 || {
                echo "  • Failed to import route table association rtbassoc-0ef7cae7d11d64815"
                exit 1
              }
              echo "  • Successfully imported rtbassoc-0ef7cae7d11d64815"
            else
              echo "  • Route table association rtbassoc-0ef7cae7d11d64815 does not exist in AWS; will be created during apply"
            fi
          fi

          # Check if EKS cluster exists
          echo "→ Checking EKS Cluster"
          if aws eks describe-cluster --name "${CLUSTER}" --region "${AWS_REGION}" >/dev/null 2>&1; then
            echo "  • Cluster ${CLUSTER} exists"
            # Import EKS Access Entry
            echo "→ Access Entry"
            if in_state "aws_eks_access_entry.admin"; then
              echo "  • Already in state"
            else
              echo "  • Checking if access entry exists (${CLUSTER}:${ADMIN})"
              if aws eks describe-access-entry --cluster-name "${CLUSTER}" --principal-arn "${ADMIN}" --region "${AWS_REGION}" >/dev/null 2>&1; then
                echo "  • Importing (${CLUSTER}:${ADMIN})"
                terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                  aws_eks_access_entry.admin "${CLUSTER}:${ADMIN}" || {
                  echo "  • Failed to import access entry ${CLUSTER}:${ADMIN}"
                  exit 1
                }
                echo "  • Successfully imported access entry"
              else
                echo "  • Access entry does not exist; will be created during apply"
              fi
            fi

            # Import EKS Access Policy Association
            echo "→ Policy Association"
            ASSOC_ID="${CLUSTER}#${ADMIN}#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
            if in_state "aws_eks_access_policy_association.admin_cluster_admin"; then
              echo "  • Already in state"
            else
              echo "  • Checking if policy association exists ($ASSOC_ID)"
              if aws eks list-access-policies --cluster-name "${CLUSTER}" --region "${AWS_REGION}" | grep -q "AmazonEKSClusterAdminPolicy"; then
                echo "  • Importing ($ASSOC_ID)"
                terraform -chdir="${{ env.TF_DIR }}" import -input=false -no-color \
                  aws_eks_access_policy_association.admin_cluster_admin "$ASSOC_ID" || {
                  echo "  • Failed to import policy association $ASSOC_ID"
                  exit 1
                }
                echo "  • Successfully imported policy association"
              else
                echo "  • Policy association does not exist; will be created during apply"
              fi
            fi
          else
            echo "  • Cluster ${CLUSTER} does not exist; access resources will be created during apply"
          fi

      - name: Terraform Plan
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          VAR_ARGS=()
          read -r -a WORDS <<< "${{ github.event.inputs.tf_vars }}"
          for w in "${WORDS[@]:-}"; do
            [[ -z "$w" ]] && continue
            if [[ "$w" != *"="* ]]; then
              echo "⚠️ Skipping invalid tf_vars token (no '='): $w"; continue
            fi
            VAR_ARGS+=("-var" "$w")
          done

          terraform -chdir="${{ env.TF_DIR }}" plan \
            -lock-timeout=10m \
            -input=false \
            -out=tfplan \
            -var "region=$AWS_REGION" \
            -var "admin_principal_arn=${ADMIN}" \
            -var-file=terraform.tfvars \
            -no-color \
            "${VAR_ARGS[@]}"

      - name: Terraform Apply
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" apply -lock-timeout=10m -auto-approve -no-color tfplan
