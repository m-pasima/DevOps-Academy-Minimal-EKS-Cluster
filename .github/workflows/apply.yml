name: Apply EKS (dir, IAM user)

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Terraform directory to apply'
        required: true
        default: 'terraform'
      tf_vars:
        description: 'Extra TF -var values (key=value, space-separated). Example: project_name=teaching-eks cluster_version=1.29'
        required: false
        default: ''

concurrency:
  group: tf-apply-${{ github.ref }}-${{ github.event.inputs.tf_dir || 'terraform' }}

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      TF_BACKEND_BUCKET:  ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_TABLE:   ${{ secrets.TF_BACKEND_TABLE }}
      TF_BACKEND_KEY:     ${{ secrets.TF_BACKEND_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Resolve directory & show files
        shell: bash
        run: |
          set -euo pipefail
          TF_DIR="${{ github.event.inputs.tf_dir || 'terraform' }}"
          echo "TF_DIR=$TF_DIR" >> "$GITHUB_ENV"
          test -d "$TF_DIR" || { echo "❌ Directory '$TF_DIR' not found"; exit 1; }
          echo "PWD=$(pwd)"
          echo "=== ls $TF_DIR ==="; ls -la "$TF_DIR" || true
          echo "=== providers.tf (head) ==="; sed -n '1,120p' "$TF_DIR/providers.tf" || true
          echo "=== variables.tf (head) ==="; sed -n '1,120p' "$TF_DIR/variables.tf" || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # Provider-only init so validate has schemas (no backend touch yet)
      - name: Terraform Init (providers only, no backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init -backend=false -input=false -upgrade
          sed -n '1,80p' "${{ env.TF_DIR }}/.terraform.lock.hcl" || true

      - name: Terraform Validate
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" validate -no-color

      # Real backend init, then plan/apply
      - name: Configure AWS (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Compute backend key
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${TF_BACKEND_KEY}" == *.tfstate ]]; then
            BACKEND_KEY="${TF_BACKEND_KEY}"
          else
            PREFIX="${TF_BACKEND_KEY%/}"
            BACKEND_KEY="${PREFIX}/${{ env.TF_DIR }}/terraform.tfstate"
          fi
          echo "BACKEND_KEY=$BACKEND_KEY" >> "$GITHUB_ENV"
          echo "Using BACKEND_KEY=$BACKEND_KEY"

      - name: Terraform Init (remote backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_TABLE" \
            -input=false -no-color

      - name: Derive cluster name and admin_principal_arn, export TF_VARs
        shell: bash
        run: |
          set -euo pipefail
          PROJECT_NAME="teaching-eks"
          for tok in ${{ github.event.inputs.tf_vars }}; do
            if [[ "$tok" == project_name=* ]]; then PROJECT_NAME="${tok#project_name=}"; fi
          done
          CLUSTER="${PROJECT_NAME}-cluster"

          ARN="$(aws sts get-caller-identity --query Arn --output text)"
          ACCOUNT="$(aws sts get-caller-identity --query Account --output text)"
          if [[ "$ARN" == *":user/"* ]]; then
            ADMIN="$ARN"
          elif [[ "$ARN" == *":assumed-role/"* ]]; then
            ROLE_NAME="$(echo "$ARN" | awk -F'/' '{print $2}')"
            ADMIN="arn:aws:iam::${ACCOUNT}:role/${ROLE_NAME}"
          else
            echo "❌ Unsupported caller ARN for admin mapping: $ARN"; exit 1
          fi

          {
            echo "PROJECT_NAME=$PROJECT_NAME"
            echo "CLUSTER=$CLUSTER"
            echo "ADMIN=$ADMIN"
            echo "TF_VAR_admin_principal_arn=$ADMIN"
            echo "TF_VAR_region=$AWS_REGION"
            echo "TF_VAR_project_name=$PROJECT_NAME"
          } >> "$GITHUB_ENV"

          echo "Resolved: CLUSTER=$CLUSTER"
          echo "Resolved: admin_principal_arn=$ADMIN"

      # ---- CHANGED: use -lock=false so imports never wait on DynamoDB lock ----
      - name: Reconcile EKS Access Entry & Policy Association (no lock)
        shell: bash
        run: |
          set -euo pipefail

          echo "→ Checking/importing aws_eks_access_entry.admin"
          if terraform -chdir="${{ env.TF_DIR }}" state show aws_eks_access_entry.admin -lock=false -no-color >/dev/null 2>&1; then
            echo "  • Access Entry already in state"
          else
            echo "  • Importing Access Entry (${CLUSTER}:${ADMIN})"
            terraform -chdir="${{ env.TF_DIR }}" import \
              -lock=false -input=false -no-color \
              aws_eks_access_entry.admin "${CLUSTER}:${ADMIN}" || true
          fi

          echo "→ Checking/importing aws_eks_access_policy_association.admin_cluster_admin"
          ASSOC_ID="${CLUSTER}#${ADMIN}#arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          if terraform -chdir="${{ env.TF_DIR }}" state show aws_eks_access_policy_association.admin_cluster_admin -lock=false -no-color >/dev/null 2>&1; then
            echo "  • Policy Association already in state"
          else
            echo "  • Importing Policy Association ($ASSOC_ID)"
            terraform -chdir="${{ env.TF_DIR }}" import \
              -lock=false -input=false -no-color \
              aws_eks_access_policy_association.admin_cluster_admin "$ASSOC_ID" || true
          fi

      - name: Terraform Plan
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          VAR_ARGS=()
          read -r -a WORDS <<< "${{ github.event.inputs.tf_vars }}"
          for w in "${WORDS[@]:-}"; do
            [[ -z "$w" ]] && continue
            if [[ "$w" != *"="* ]]; then
              echo "⚠️ Skipping invalid tf_vars token (no '='): $w"; continue
            fi
            VAR_ARGS+=("-var" "$w")
          done

          terraform -chdir="${{ env.TF_DIR }}" plan \
            -lock-timeout=10m \
            -input=false \
            -out=tfplan \
            -var "region=$AWS_REGION" \
            -var "admin_principal_arn=${ADMIN}" \
            -no-color \
            "${VAR_ARGS[@]}"

      - name: Terraform Apply
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" apply -lock-timeout=10m -auto-approve -no-color tfplan


