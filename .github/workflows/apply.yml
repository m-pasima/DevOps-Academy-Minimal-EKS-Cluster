name: Apply EKS (dir, IAM user)

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Terraform directory to apply'
        required: true
        default: 'terraform'
      tf_vars:
        description: 'Extra TF -var values (key=value, space-separated)'
        required: false
        default: ''

concurrency:
  group: tf-apply-${{ github.ref }}-${{ github.event.inputs.tf_dir || 'terraform' }}

jobs:
  apply:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      TF_BACKEND_BUCKET:  ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_TABLE:   ${{ secrets.TF_BACKEND_TABLE }}
      TF_BACKEND_KEY:     ${{ secrets.TF_BACKEND_KEY }}

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Resolve directory & show files
        shell: bash
        run: |
          set -euo pipefail
          TF_DIR="${{ github.event.inputs.tf_dir || 'terraform' }}"
          echo "TF_DIR=$TF_DIR" >> "$GITHUB_ENV"
          test -d "$TF_DIR" || { echo "❌ Directory '$TF_DIR' not found"; exit 1; }
          echo "PWD=$(pwd)"
          echo "=== ls $TF_DIR ==="
          ls -la "$TF_DIR"
          echo "=== head providers.tf ==="
          sed -n '1,120p' "$TF_DIR/providers.tf" || true
          echo "=== head variables.tf ==="
          sed -n '1,120p' "$TF_DIR/variables.tf" || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # ---- Install providers WITHOUT backend (required before validate) ----
      - name: Terraform Init (providers only, no backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init -input=false -backend=false -upgrade

      - name: Terraform Validate
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" validate

      # ---- Real backend init, then plan/apply ----
      - name: Configure AWS (keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Compute backend key
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${TF_BACKEND_KEY}" == *.tfstate ]]; then
            BACKEND_KEY="${TF_BACKEND_KEY}"
          else
            PREFIX="${TF_BACKEND_KEY%/}"
            BACKEND_KEY="${PREFIX}/${{ env.TF_DIR }}/terraform.tfstate"
          fi
          echo "BACKEND_KEY=$BACKEND_KEY" >> "$GITHUB_ENV"
          echo "Using BACKEND_KEY=$BACKEND_KEY"

      - name: Terraform Init (remote backend)
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_TABLE"

      - name: Build -var args
        id: varargs
        shell: bash
        run: |
          set -euo pipefail
          VAR_ARGS=()
          # Split on spaces; each token must be key=value
          read -r -a WORDS <<< "${{ github.event.inputs.tf_vars }}"
          for w in "${WORDS[@]:-}"; do
            [[ -z "$w" ]] && continue
            # Reject tokens without '=' to avoid accidental positional args
            if [[ "$w" != *"="* ]]; then
              echo "⚠️ Skipping invalid tf_vars token (no '='): $w"
              continue
            fi
            VAR_ARGS+=("-var" "$w")
          done
          printf '%s\0' "${VAR_ARGS[@]}" > var_args.null

      - name: Terraform Plan
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          mapfile -d '' VAR_ARGS < "${{ env.TF_DIR }}/var_args.null" || true
          # Always pass region explicitly; then any extras
          terraform -chdir="${{ env.TF_DIR }}" plan \
            -lock-timeout=5m \
            -input=false \
            -out=tfplan \
            -var "region=$AWS_REGION" \
            "${VAR_ARGS[@]}"

      - name: Terraform Apply
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" apply -lock-timeout=5m -auto-approve tfplan

