name: Destroy EKS

on:
  workflow_dispatch:
    inputs:
      tf_dir:
        description: 'Terraform directory to destroy'
        required: true
        default: 'terraform'
      tf_vars:
        description: 'Extra TF -var values (key=value, space-separated). Example: project_name=teaching-eks cluster_version=1.29'
        required: false
        default: ''

concurrency:
  group: tf-destroy-${{ github.ref }}-${{ github.event.inputs.tf_dir || 'terraform' }}

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      TF_BACKEND_BUCKET:  ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_TABLE:   ${{ secrets.TF_BACKEND_TABLE }}
      TF_BACKEND_KEY:     ${{ secrets.TF_BACKEND_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Resolve Directory & Show Files
        shell: bash
        run: |
          set -euo pipefail
          TF_DIR="${{ github.event.inputs.tf_dir || 'terraform' }}"
          echo "TF_DIR=$TF_DIR" >> "$GITHUB_ENV"
          test -d "$TF_DIR" || { echo "❌ Directory '$TF_DIR' not found"; exit 1; }
          echo "PWD=$(pwd)"
          echo "=== ls $TF_DIR ==="
          ls -la "$TF_DIR"
          echo "=== terraform.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/terraform.tf" 2>/dev/null || echo "No terraform.tf"
          echo "=== variables.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/variables.tf" 2>/dev/null || echo "No variables.tf"
          echo "=== vpc.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/vpc.tf" 2>/dev/null || echo "No vpc.tf"
          echo "=== eks.tf (head) ==="
          sed -n '1,120p' "$TF_DIR/eks.tf" 2>/dev/null || echo "No eks.tf"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure AWS (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Compute Backend Key
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${TF_BACKEND_KEY}" == *.tfstate ]]; then
            BACKEND_KEY="${TF_BACKEND_KEY}"
          else
            PREFIX="${TF_BACKEND_KEY%/}"
            BACKEND_KEY="${PREFIX}/${{ env.TF_DIR }}/terraform.tfstate"
          fi
          echo "BACKEND_KEY=$BACKEND_KEY" >> "$GITHUB_ENV"
          echo "Using BACKEND_KEY=$BACKEND_KEY"

      - name: Derive admin_principal_arn
        shell: bash
        run: |
          set -euo pipefail
          ARN="$(aws sts get-caller-identity --query Arn --output text)"
          ACCOUNT="$(aws sts get-caller-identity --query Account --output text)"
          if [[ "$ARN" == *":user/"* ]]; then
            ADMIN="$ARN"
          elif [[ "$ARN" == *":assumed-role/"* ]]; then
            ROLE_NAME="$(echo "$ARN" | awk -F'/' '{print $2}')"
            ADMIN="arn:aws:iam::${ACCOUNT}:role/${ROLE_NAME}"
          else
            echo "❌ Unsupported caller ARN for admin mapping: $ARN"; exit 1
          fi
          echo "TF_VAR_admin_principal_arn=$ADMIN" >> "$GITHUB_ENV"
          echo "Resolved: admin_principal_arn=$ADMIN"

      - name: Terraform Init
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_BACKEND_TABLE" \
            -input=false -no-color

      - name: Verify Terraform State
        shell: bash
        run: |
          set -euo pipefail
          echo "→ Current Terraform state"
          terraform -chdir="${{ env.TF_DIR }}" state list 2>/dev/null || echo "  • No resources in state"

      - name: Terraform Plan (Destroy)
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          VAR_ARGS=()
          read -r -a WORDS <<< "${{ github.event.inputs.tf_vars }}"
          for w in "${WORDS[@]:-}"; do
            [[ -z "$w" ]] && continue
            if [[ "$w" != *"="* ]]; then
              echo "⚠️ Skipping invalid tf_vars token (no '='): $w"; continue
            fi
            VAR_ARGS+=("-var" "$w")
          done

          terraform -chdir="${{ env.TF_DIR }}" plan -destroy \
            -lock-timeout=10m \
            -input=false \
            -out=tfplan \
            -var "region=$AWS_REGION" \
            -var "admin_principal_arn=$TF_VAR_admin_principal_arn" \
            -var-file=terraform.tfvars \
            -no-color \
            "${VAR_ARGS[@]}"

      - name: Terraform Destroy
        env:
          TF_IN_AUTOMATION: true
        shell: bash
        run: |
          set -euo pipefail
          terraform -chdir="${{ env.TF_DIR }}" apply -destroy -lock-timeout=10m -auto-approve -no-color tfplan

      # Optional: Cleanup S3 bucket and DynamoDB table (uncomment to enable)
      # - name: Cleanup Terraform Backend
      #   if: success()
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     echo "→ Deleting Terraform state file from S3"
      #     aws s3 rm "s3://$TF_BACKEND_BUCKET/$BACKEND_KEY" || echo "  • S3 state file not found or already deleted"
      #     echo "→ Deleting DynamoDB lock table"
      #     aws dynamodb delete-table --table-name "$TF_BACKEND_TABLE" --region "$AWS_REGION" || echo "  • DynamoDB table not found or already deleted"
